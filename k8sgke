1. Connecting to created Cluster:
    gcloud container clusters get-credentials duplicate-cluster --zone europe-west3-c --project able-reef-372206

2. Creating a deployment with image:
    kubectl create deployment hello-world-rest-api --image=in28min/hello-world-rest-api:0.0.1.RELEASE
    
3. Get deployments in the given cluster:
    kubectl get deployment
    
4. Exposing the deployment to the outside world:
    kubectl expose deployment hello-world-rest-api --type=loadbalancer --port=8080
        
5. Get all services in the given cluster:
    kubectl get services
    
6. Watch progress of LoadBalancer external IP to be provided:
    kubectl get services --watch
    
7. Curl to see if external IP is working:
    curl 34.159.69.247:8080
    curl 34.159.69.247:8080/hello-world
    
8. To get a list of events happening in the cluster:
    kubectl get events
    


######
You create a deployment to deploy a micro service:
You create a service to expose the deployment to the outside world.
######

#####
Increasing number of services in my microservice:
#####

9. Scale your  deployment:
    kubectl scale deployment hello-world-rest-api --replicas=3
    
10. View deployments after scale:
     kubectl get deployment

11. Watch if deployment scale is working:
     watch curl http://34.159.69.247:8080/hello-world
        ### if correctly done youll notice three different sources: the are called pods.###
        ### Load is now distributed among the pods###      

12. Get pods: 
     kubectl get pods
     
13. Increase number of nodes in cluster/Cluster resize:
      ### If you want to run 100 or 1000 instances your microservices ###
     gcloud container clusters resize duplicate-cluster --node-pool default-pool --num-nodes=2 --zone=europe-west3-c
        ###this is increasing the number of nodes manually, which is not handy###

14. Auto scaling for microservice:
     kubectl autoscale deployment hello-world-rest-api --max=4 --cpu-percent=70
       ### internally after this command is entered a HPA(Horizontal pod autoscale) is created
     kubectl get hpa  
       ###creating configmaps ###
     kubectl create configmap hello-world-app --from-literal=RDS_DB_NAME=hello-world
     kubectl get configmap
     kubectl describe configmap hello-world  


15. Adding configs for microservices, lets say database:
    config map - 
         kubectl create configmap hello-world-app --from-literal=RDS_DB_NAME=hello-world
         kubectl describe configmap hello-world

16. Add secrets to microservices:
      ### ads passwords and usercredentials to microservice#
      kubectl create secret generic hello-world-app-secrets --from-literal=RDS_PASSWORD=dummyhelloworld
      ###get secrets###
      kubectl get secrets
      ###get infor about the secrets ###
      kubectl describe secret hello-world-app-secrets 
     
### If you want to store databases use configmaps###
### if you want to store passwords use secrets###

### There are two ways to deploy things to kubernetes ###
                1. commands (imaprative style)
                2. yaml (Declarative style)
     
    
